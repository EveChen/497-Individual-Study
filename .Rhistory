install.packages("readr")
install.packages("data.table")
library(RandomForest)
install.packages("RandomForest")
install.packages("randomForest")
library(randomForest)
library(readr)
library(data.table)
shinyUI(bootstrapPage(
selectInput(inputId = "n_breaks",
label = "Number of bins in
histogram (approximate):",
choices = c(10, 20, 35, 50),
selected = 20),
plotOutput(outputId =
"main_plot", height = "300px")
))
install.packages("shiny")
library(shiny)
shinyUI(bootstrapPage(
selectInput(inputId = "n_breaks",
label = "Number of bins in
histogram (approximate):",
choices = c(10, 20, 35, 50),
selected = 20),
plotOutput(outputId =
"main_plot", height = "300px")
))
shinyUI(bootstrapPage(
selectInput(inputId = "n_breaks",
label = "Number of bins in histogram (approximate):",
choices = c(10, 20, 35, 50),
selected = 20),
checkboxInput(inputId = "individual_obs",
label = strong("Show individual observations"),
value = FALSE),
checkboxInput(inputId = "density",
label = strong("Show density estimate"),
value = FALSE),
plotOutput(outputId = "main_plot", height = "300px"),
# Display this only if the density is shown
conditionalPanel(condition = "input.density == true",
sliderInput(inputId = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
runExample("01_hello")
runApp('C:/Users/Eve/Dropbox/UCLA專區/課程/418 Tools of Data Science/HW2 - Shiny作品/HW2')
runApp('C:/Users/Eve/Dropbox/UCLA專區/課程/418 Tools of Data Science/HW2 - Shiny作品/HW2')
runApp('C:/Users/Eve/Downloads/shiny-quickstart-1/downloads/code/01-template.R')
runApp('C:/Users/Eve/Downloads/shiny-quickstart-1/downloads/code/01-template.R')
shiny::runApp('C:/ShinyApp')
runApp('C:/ShinyApp')
runApp('C:/ShinyApp')
runApp('C:/ShinyApp')
uninstall.packages("datasets")
shiny::runApp('C:/ShinyApp')
shiny::runApp('C:/ShinyApp/Test')
shiny::runApp('C:/ShinyApp_New')
runApp('C:/ShinyApp_New')
runApp('C:/ShinyApp_New')
summary(data$V4)
data <- read.csv("C:/ShinyApp/Test/Data/dat.csv", header = T)
summary(data)
summary(data$V7)
summary(data$V6)
error <- data$V7
head(error)
runApp('C:/ShinyApp_New')
runApp('C:/ShinyApp_New')
runApp('C:/ShinyApp_New')
shiny::runApp('C:/Users/Eve/Dropbox/ShinyApp_New')
runApp('C:/Users/Eve/Dropbox/ShinyApp_New')
runApp('C:/Users/Eve/Dropbox/ShinyApp_New')
runApp('C:/Users/Eve/Dropbox/ShinyApp_New')
install.packages("MASS")
library(MASS)
install.packages("ISLR")
library(ISLR)
Boston
head(Boston)
colnames(Boston)
summary(Boston)
head(Smarket)
setwd("C:/Users/Eve/Dropbox/UCLA Files/Courses/497 Individual Study")
library(h2o)
h2o.init(nthreads=-1)
dx <- h2o.importFile("bank.csv")
library(randomForest)
setwd("C:/Users/Eve/Dropbox/UCLA Files/Courses/497 Individual Study")
library(randomForest)
dat <- read.csv("bank.csv")
head(dat)
summary(dat)
dat$y <- as.factor(dat$y)
head(dat)
summary(dat)
str(dat)
train_sample = sample(nrow(dat), size = nrow(data)*0.6)
train_sample = sample(nrow(dat), size = nrow(dat)*0.6)
train_dat = dat[train_sample,]
test_dat = dat[-train_sample,]
rf = randomForest(y=train_dat$y, x = train_dat[, -ncol(train_dat)],
ytest = test_dat$y, xtest = test_dat[, -ncol(test_dat)],
ntree = 200, mtry = 3, keep.forest = TRUE)
rf
varImpPlot(rf,type=2)
rf2 = randomForest(y=train_dat$y, x = train_dat[, -c(train_dat$y, train_dat$duration)],
ytest = test_dat$y, xtest = test_dat[, -ncol(test_dat)],
ntree = 200, mtry = 3, keep.forest = TRUE)
Xnames <- names(train_dat)[which(names(train_dat)!="y" & which(names(train_dat)!="duration")]
rf2 = randomForest(y=train_dat$y, x = train_dat[, -c(train_dat$y, train_dat$duration)],
ytest = test_dat$y, xtest = test_dat[, -ncol(test_dat)],
ntree = 200, mtry = 3, keep.forest = TRUE)
x = train_dat[, -c(train_dat$y, train_dat$duration)]
x
train_dat$y
y
y=train_dat$y
y
nrow(y)
nrow(train_dat$y)
length(train_dat$y)
Xnames <- names(train_dat)[which(names(train_dat)!="y" & which(names(train_dat)!="duration")]
rf2 = randomForest(y=train_dat$y, x = train_dat[, -c(train_dat$y, train_dat$duration)],
ytest = test_dat$y, xtest = test_dat[, -c(train_dat$y, train_dat$duration)],
ntree = 200, mtry = 3, keep.forest = TRUE)
Xnames <- names(train_dat)[which(names(train_dat)!="y" & which(names(train_dat)!="duration")]
rf2 = randomForest(y=train_dat$y, x = train_dat[, -c(train_dat$y, train_dat$duration)],
ytest = test_dat$y, xtest = test_dat[, -c(train_dat$y, train_dat$duration)],
ntree = 200, keep.forest = TRUE)
rf2 = randomForest(y=train_dat$y, x = train_dat[, -c(train_dat$y, train_dat$duration)],
ytest = test_dat$y, xtest = test_dat[, -c(train_dat$y, train_dat$duration)],
ntree = 200, keep.forest = TRUE)
colnames(dat)
partialPlot(rf, train_dat, duration, 1)
partialPlot(rf, train_dat, train_dat$duration, 1)
rf
pred_rf <- predict(rf, test_dat)
roc(test_dat$y, pred_rf)
install.packages("pROC")
library("pROC")
pred_rf <- predict(rf, test_dat)
roc(test_dat$y, pred_rf)
pred_rf
scoreT <- pred_rf[which(test_dat$y == "Y")]
scoreF <- pred_rf[which(test_dat$y == "N")]
pr.curve(scores.class0 = scoreT, scores.class1 = scoreF, curve = T)
install.packages("PRROC")
library(PRROC)
scoreT <- pred_rf[which(test_dat$y == "Y")]
scoreF <- pred_rf[which(test_dat$y == "N")]
pr.curve(scores.class0 = scoreT, scores.class1 = scoreF, curve = T)
scoreT
scoreT <- pred_rf[which(test_dat$y == 1)]
scoreF <- pred_rf[which(test_dat$y == 0)]
pr.curve(scores.class0 = scoreT, scores.class1 = scoreF, curve = T)
scoreF
rf2 <- randomForest(y ~ ., data = train_dat,
importance = T, na.action = na.omit)
pred_rf2 <- predict(rf2, test_dat)
roc(test_dat$y, pred_rf2)
rf
